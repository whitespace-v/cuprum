{"ast":null,"code":"import { categorySlice } from \"../slices/CategorySlice\";\nimport { $host } from \"../../http\";\nexport const fetchCategories = () => async dispatch => {\n  try {\n    dispatch(categorySlice.actions.categoryFetching());\n    const {\n      data\n    } = await $host.get('api/category');\n    dispatch(categorySlice.actions.categoryFetchingSuccess(data));\n    dispatch(categorySlice.actions.subcategoryFetching());\n    const {\n      data: subcategories\n    } = await $host.get('api/subcategory', {\n      params: data[0]\n    });\n    dispatch(categorySlice.actions.subcategoryFetchingSuccess(subcategories));\n  } catch (e) {\n    dispatch(categorySlice.actions.categoryFetchingError());\n  }\n};\nexport const createCategory = name => async dispatch => {\n  try {\n    dispatch(categorySlice.actions.categoryCreation());\n    await $host.post('api/category', {\n      name\n    }); //authost !\n    dispatch(categorySlice.actions.categoryCreationSuccess());\n  } catch (e) {\n    dispatch(categorySlice.actions.categoryCreationError());\n  }\n};\nexport const setCurrentCategory = category => async dispatch => {\n  dispatch(categorySlice.actions.categorySet(category));\n  try {\n    dispatch(categorySlice.actions.subcategoryFetching());\n    const {\n      data\n    } = await $host.get('api/subcategory', {\n      params: category\n    });\n    dispatch(categorySlice.actions.subcategoryFetchingSuccess(data));\n  } catch (e) {\n    dispatch(categorySlice.actions.subcategoryFetchingError());\n  }\n};\nexport const setCurrentSubcategory = subcategory => async dispatch => {\n  dispatch(categorySlice.actions.subcategorySet(subcategory));\n};","map":{"version":3,"names":["categorySlice","$host","fetchCategories","dispatch","actions","categoryFetching","data","get","categoryFetchingSuccess","subcategoryFetching","subcategories","params","subcategoryFetchingSuccess","e","categoryFetchingError","createCategory","name","categoryCreation","post","categoryCreationSuccess","categoryCreationError","setCurrentCategory","category","categorySet","subcategoryFetchingError","setCurrentSubcategory","subcategory","subcategorySet"],"sources":["/home/maximka/Desktop/rashidtema/client/src/store/ActionCreators/CategoryActionCreators.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\nimport {ICategory, ISubcategory} from \"../../models/DataBaseItems\";\nimport {categorySlice} from \"../slices/CategorySlice\";\nimport {$host} from \"../../http\";\n\nexport const fetchCategories = () => async(dispatch: AppDispatch) => {\n    try {\n        dispatch(categorySlice.actions.categoryFetching())\n        const {data} = await $host.get('api/category')\n        dispatch(categorySlice.actions.categoryFetchingSuccess(data))\n        dispatch(categorySlice.actions.subcategoryFetching())\n        const {data: subcategories} = await $host.get('api/subcategory', {params: data[0]})\n        dispatch(categorySlice.actions.subcategoryFetchingSuccess(subcategories))\n    } catch (e) {\n        dispatch(categorySlice.actions.categoryFetchingError())\n    }\n}\n\nexport const createCategory = (name: string) => async(dispatch: AppDispatch) => {\n    try {\n        dispatch(categorySlice.actions.categoryCreation())\n        await $host.post('api/category', {name}) //authost !\n        dispatch(categorySlice.actions.categoryCreationSuccess())\n    } catch (e) {\n        dispatch(categorySlice.actions.categoryCreationError())\n    }\n}\n\nexport const setCurrentCategory = (category: ICategory) => async(dispatch: AppDispatch) => {\n    dispatch(categorySlice.actions.categorySet(category))\n    try {\n        dispatch(categorySlice.actions.subcategoryFetching())\n        const {data} = await $host.get('api/subcategory', {params: category})\n        dispatch(categorySlice.actions.subcategoryFetchingSuccess(data))\n    } catch (e) {\n        dispatch(categorySlice.actions.subcategoryFetchingError())\n    }\n}\nexport const setCurrentSubcategory = (subcategory: ISubcategory) => async(dispatch: AppDispatch) => {\n    dispatch(categorySlice.actions.subcategorySet(subcategory))\n}\n"],"mappings":"AAEA,SAAQA,aAAa,QAAO,yBAAyB;AACrD,SAAQC,KAAK,QAAO,YAAY;AAEhC,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAMC,QAAqB,IAAK;EACjE,IAAI;IACAA,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACC,gBAAgB,EAAE,CAAC;IAClD,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,cAAc,CAAC;IAC9CJ,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACI,uBAAuB,CAACF,IAAI,CAAC,CAAC;IAC7DH,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACK,mBAAmB,EAAE,CAAC;IACrD,MAAM;MAACH,IAAI,EAAEI;IAAa,CAAC,GAAG,MAAMT,KAAK,CAACM,GAAG,CAAC,iBAAiB,EAAE;MAACI,MAAM,EAAEL,IAAI,CAAC,CAAC;IAAC,CAAC,CAAC;IACnFH,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACQ,0BAA0B,CAACF,aAAa,CAAC,CAAC;EAC7E,CAAC,CAAC,OAAOG,CAAC,EAAE;IACRV,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACU,qBAAqB,EAAE,CAAC;EAC3D;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,IAAY,IAAK,MAAMb,QAAqB,IAAK;EAC5E,IAAI;IACAA,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACa,gBAAgB,EAAE,CAAC;IAClD,MAAMhB,KAAK,CAACiB,IAAI,CAAC,cAAc,EAAE;MAACF;IAAI,CAAC,CAAC,EAAC;IACzCb,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACe,uBAAuB,EAAE,CAAC;EAC7D,CAAC,CAAC,OAAON,CAAC,EAAE;IACRV,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACgB,qBAAqB,EAAE,CAAC;EAC3D;AACJ,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,QAAmB,IAAK,MAAMnB,QAAqB,IAAK;EACvFA,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACmB,WAAW,CAACD,QAAQ,CAAC,CAAC;EACrD,IAAI;IACAnB,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACK,mBAAmB,EAAE,CAAC;IACrD,MAAM;MAACH;IAAI,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,iBAAiB,EAAE;MAACI,MAAM,EAAEW;IAAQ,CAAC,CAAC;IACrEnB,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACQ,0BAA0B,CAACN,IAAI,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOO,CAAC,EAAE;IACRV,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACoB,wBAAwB,EAAE,CAAC;EAC9D;AACJ,CAAC;AACD,OAAO,MAAMC,qBAAqB,GAAIC,WAAyB,IAAK,MAAMvB,QAAqB,IAAK;EAChGA,QAAQ,CAACH,aAAa,CAACI,OAAO,CAACuB,cAAc,CAACD,WAAW,CAAC,CAAC;AAC/D,CAAC"},"metadata":{},"sourceType":"module"}